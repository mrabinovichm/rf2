/*** BeginHeader rc632 */

/*Registros de configuracion y control del IC RC632, pag.20*/
enum rc632_registers {
	RC632_REG_PAGE0			 		= 0x00,
	RC632_REG_COMMAND			  		= 0x01,
	RC632_REG_FIFO_DATA		  		= 0x02,
	RC632_REG_PRIMARY_STATUS  		= 0x03,
	RC632_REG_FIFO_LENGTH	  		= 0x04,
	RC632_REG_SECONDARY_STATUS		= 0x05,
	RC632_REG_INTERRUPT_EN	  		= 0x06,
	RC632_REG_INTERRUPT_RQ	  		= 0x07,

	RC632_REG_PAGE1			  		= 0x08,
	RC632_REG_CONTROL			  		= 0x09,
	RC632_REG_ERROR_FLAG		  		= 0x0a,
	RC632_REG_COLL_POS		  		= 0x0b,
	RC632_REG_TIMER_VALUE	  		= 0x0c,
	RC632_REG_CRC_RESULT_LSB  		= 0x0d,
	RC632_REG_CRC_RESULT_MSB		= 0x0e,
	RC632_REG_BIT_FRAMING			= 0x0f,

	RC632_REG_PAGE2					= 0x10,
	RC632_REG_TX_CONTROL		  		= 0x11,
	RC632_REG_CW_CONDUCTANCE  		= 0x12,
	RC632_REG_MOD_CONDUCTANCE 		= 0x13,
	RC632_REG_CODER_CONTROL	  		= 0x14,
	RC632_REG_MOD_WIDTH		 		= 0x15,
	RC632_REG_MOD_WIDTH_SOF	 		= 0x16,
	RC632_REG_TYPE_B_FRAMING 		= 0x17,

	RC632_REG_PAGE3			 		= 0x18,
	RC632_REG_RX_CONTROL1	 		= 0x19,
	RC632_REG_DECODER_CONTROL 		= 0x1a,
	RC632_REG_BIT_PHASE		  		= 0x1b,
	RC632_REG_RX_THRESHOLD	  		= 0x1c,
	RC632_REG_BPSK_DEM_CONTROL		= 0x1d,
	RC632_REG_RX_CONTROL2			= 0x1e,
	RC632_REG_CLOCK_Q_CONTROL		= 0x1f,

	RC632_REG_PAGE4					= 0x20,
	RC632_REG_RX_WAIT					= 0x21,
	RC632_REG_CHANNEL_REDUNDANCY	= 0x22,
	RC632_REG_CRC_PRESET_LSB		= 0x23,
	RC632_REG_CRC_PRESET_MSB		= 0x24,
	RC632_REG_TIME_SLOT_PERIOD		= 0x25,
	RC632_REG_MFOUT_SELECT			= 0x26,
	RC632_REG_PRESET_27				= 0x27,

	RC632_REG_PAGE5					= 0x28,
	RC632_REG_FIFO_LEVEL				= 0x29,
	RC632_REG_TIMER_CLOCK			= 0x2a,
	RC632_REG_TIMER_CONTROL			= 0x2b,
	RC632_REG_TIMER_RELOAD			= 0x2c,
	RC632_REG_IRQ_PIN_CONFIG		= 0x2d,
	RC632_REG_PRESET_2E		  		= 0x2e,
	RC632_REG_PRESET_2F				= 0x2f,

	RC632_REG_PAGE6			  		= 0x30,

	RC632_REG_PAGE7					= 0x38,
	RC632_REG_TEST_ANA_SELECT		= 0x3a,
	RC632_REG_TEST_DIGI_SELECT		= 0x3d,
};

/*Bits de estado en el registro PrimaryStatus, pag.26 datasheet*/
enum rc632_reg_status {
	RC632_STAT_LOALERT				= 0x01,
	RC632_STAT_HIALERT				= 0x02,
	RC632_STAT_ERR						= 0x04,
	RC632_STAT_IRQ					   = 0x08,
#define RC632_STAT_MODEM_MASK		  0x70
	RC632_STAT_MODEM_IDLE			= 0x00,
	RC632_STAT_MODEM_TXSOF			= 0x10,
	RC632_STAT_MODEM_TXDATA			= 0x20,
	RC632_STAT_MODEM_TXEOF			= 0x30,
	RC632_STAT_MODEM_GOTORX			= 0x40,
	RC632_STAT_MODEM_PREPARERX		= 0x50,
	RC632_STAT_MODEM_AWAITINGRX	= 0x60,
	RC632_STAT_MODEM_RECV			= 0x70,
};

/*Comandos del IC RC632, pag.112 datasheet*/
enum rc632_reg_command {
	RC632_CMD_IDLE						= 0x00,
	RC632_CMD_WRITE_E2				= 0x01,
	RC632_CMD_READ_E2					= 0x03,
	RC632_CMD_LOAD_CONFIG 			= 0x07,
	RC632_CMD_LOAD_KEY_E2			= 0x0b,
	RC632_CMD_AUTHENT1				= 0x0c,
	RC632_CMD_CALC_CRC				= 0x12,
	RC632_CMD_AUTHENT2				= 0x14,
	RC632_CMD_RECEIVE					= 0x16,
	RC632_CMD_LOAD_KEY				= 0x19,
	RC632_CMD_TRANSMIT				= 0x1a,
	RC632_CMD_TRANSCEIVE				= 0x1e,
	RC632_CMD_STARTUP					= 0x3f,
};

/*Bits de interrupcion en el registro InterruptRq, pag.30 datasheet*/
enum rc632_reg_interrupt {
	RC632_INT_LOALERT					= 0x01,
	RC632_INT_HIALERT					= 0x02,
	RC632_INT_IDLE						= 0x04,
	RC632_INT_RX						= 0x08,
	RC632_INT_TX						= 0x10,
	RC632_INT_TIMER					= 0x20,
	RC632_INT_SET						= 0x80,
};

/*Bits de control en el registro Control, pag.31 datasheet*/
enum rc632_reg_control {
	RC632_CONTROL_FIFO_FLUSH		= 0x01,
	RC632_CONTROL_TIMER_START		= 0x02,
	RC632_CONTROL_TIMER_STOP		= 0x04,
	RC632_CONTROL_CRYPTO1_ON		= 0x08,
	RC632_CONTROL_POWERDOWN			= 0x10,
	RC632_CONTROL_STANDBY			= 0x20,
};

/*Bits de error en el registro ErrorFlag, pag.31 datasheet*/
enum rc632_reg_error_flag {
	RC632_ERR_FLAG_COL_ERR			= 0x01,
	RC632_ERR_FLAG_PARITY_ERR		= 0x02,
	RC632_ERR_FLAG_FRAMING_ERR		= 0x04,
	RC632_ERR_FLAG_CRC_ERR			= 0x08,
	RC632_ERR_FLAG_FIFO_OVERFLOW	= 0x10,
	RC632_ERR_FLAG_ACCESS_ERR		= 0x20,
	RC632_ERR_FLAG_KEY_ERR			= 0x40,
};

/*Bits de control del transmisor en el registro TxControl, pag.38 datasheet*/
enum rc632_reg_tx_control {
	RC632_TXCTRL_TX1_RF_EN		   = 0x01,
	RC632_TXCTRL_TX2_RF_EN			= 0x02,
	RC632_TXCTRL_TX2_CW				= 0x04,
	RC632_TXCTRL_TX2_INV				= 0x08,
	RC632_TXCTRL_FORCE_100_ASK		= 0x10,

	RC632_TXCTRL_MOD_SRC_LOW		= 0x00,
	RC632_TXCTRL_MOD_SRC_HIGH		= 0x20,
	RC632_TXCTRL_MOD_SRC_INT		= 0x40,
	RC632_TXCTRL_MOD_SRC_MFIN		= 0x60,
};

/*Bits para seleccionar el modo en que se verifican la integridad de los datos*/
/*registro ChannelRedundancy, pag.52 datasheet*/
enum rc632_reg_channel_redundancy {
	RC632_CR_PARITY_ENABLE			= 0x01,
	RC632_CR_PARITY_ODD	  			= 0x02,
	RC632_CR_TX_CRC_ENABLE			= 0x04,
	RC632_CR_RX_CRC_ENABLE			= 0x08,
	RC632_CR_CRC8						= 0x10,
	RC632_CR_CRC3309	  				= 0x20,
};

/*** EndHeader */
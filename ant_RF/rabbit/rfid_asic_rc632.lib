/*** BeginHeader RFID_ASIC_RC632 */

/* Funciones especificas para uso con el IC CL RC632 */

#define LENGTH_FIFO 64

#define RFID_MIFARE_KEY_LEN 6
#define RFID_MIFARE_KEY_CRYPTO1_LEN 12

#define ERROR_FLAG       0x01
#define ERROR_CRYPTO1_ON 0x02
#define ERROR_ATQA       0xFF

/*** EndHeader */



/*** BeginHeader rc632_reg_write */
void rc632_reg_write(byte reg, byte val);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_reg_write                         <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_reg_write(byte reg, byte val);

DESCRIPTION:   Escribe un comando o valor en el registro indicado
					del integrado CL RC632.

PARAMETER1:    Direccion de registro a ser modificado.
PARAMETER2:    Valor a ser escrito en el registro indicado.

END DESCRIPTION **********************************************************/
void rc632_reg_write(byte reg, byte val)
{
   byte send[2];

   send[0] = reg;
   send[1] = val;

   spi_send(send, 2);

}
/*************************************************************************/



/*** BeginHeader rc632_reg_read */
void rc632_reg_read(byte reg, byte *val);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_reg_read                          <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_reg_read(byte reg, byte *val);

DESCRIPTION:   Lee el registro indicado del integrado CL RC632.

PARAMETER1:    Direccion de registro a ser leido.
PARAMETER2:    Valor devuelto por el registro.

END DESCRIPTION **********************************************************/
void rc632_reg_read(byte reg, byte *val)
{
	byte send[1];

   send[0] = reg;

   spi_receive(send, val, 1);
}
/*************************************************************************/



/*** BeginHeader init_uP_interface */
void init_uP_interface(void);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
init_uP_interface                       <RFID_ASIC_RC632.LIB>

SYNTAX:			void init_uP_interface(void);

DESCRIPTION:   Inicializa la interfaz entre el CL RC632 y el uProcesador
					con puerto paralelo, no necesaria para puerto SPI

END DESCRIPTION **********************************************************/
void init_uP_interface(void)
{
	byte cmd_up_interface[2];

   cmd_up_interface[0] = RC632_REG_PAGE0;     //Escribir en Page-Registry
   cmd_up_interface[1] = 0x80;     //Inicializa la interfaz con el uProcesador

   spi_send(cmd_up_interface, 2);
}
/*************************************************************************/



/*** BeginHeader idle_rc632 */
void idle_rc632(void);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
idle_rc632                              <RFID_ASIC_RC632.LIB>

SYNTAX:			void idle_rc632(void);

DESCRIPTION:   Verifica que el IC CL RC632 está ocioso.
					El valor del registro de comando debe estar en 0.

END DESCRIPTION **********************************************************/
void idle_rc632(void)
{
	byte send[1], receive[1];

   do
   {
		send[0] = RC632_REG_COMMAND;
      spi_receive(send, receive, 1);
   } while(receive[0] != 0x00);
}
/*************************************************************************/



/*** BeginHeader page_disable */
void page_disable(void);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
page_disable                            <RFID_ASIC_RC632.LIB>

SYNTAX:			void page_disable(void);

DESCRIPTION:   Deshabilita el direccionamiento por pagina escribiendo
					0x00 en el registro de Pagina0.
					El direccionamiento sera lineal.

END DESCRIPTION **********************************************************/
void page_disable(void)
{
	byte cmd_page_disable[2];

	cmd_page_disable[0] = RC632_REG_PAGE0;
	cmd_page_disable[1] = 0x00;            //habilita el direccionamiento lineal

   spi_send(cmd_page_disable, 2);

}
/*************************************************************************/



/*** BeginHeader reset_FIFO_buffer */
void reset_FIFO_buffer(void);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
reset_FIFO_buffer                       <RFID_ASIC_RC632.LIB>

SYNTAX:			void reset_FIFO_buffer(void);

DESCRIPTION:   Borra el buffer del integrado poniendo un "1" en el bit 0
					(FlushFIFO) del registro de control.

END DESCRIPTION **********************************************************/
void reset_FIFO_buffer(void)
{
	byte send[2], receive[1];

   send[0] = RC632_REG_CONTROL;

   spi_receive(send, receive, 1);      //lee el registro de control

   send[0] = RC632_REG_CONTROL;
   send[1] = receive[0] | RC632_CONTROL_FIFO_FLUSH;

   spi_send(send, 2);                  //escribe el registro de control

}
/*************************************************************************/



/*** BeginHeader rc632_fifo_write */
void rc632_fifo_write(byte *data, int length);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_fifo_write                        <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_fifo_write(byte *data, int length);

DESCRIPTION:   Escribe en el buffer FIFO del integrado CL RC632.

PARAMETER1:    Arreglo de bytes a ser escrito en el buffer FIFO.
PARAMETER2:    Longitud del arreglo de bytes a ser escrito en el buffer.

END DESCRIPTION **********************************************************/
void rc632_fifo_write(byte *data, int length)
{
	byte buff[LENGTH_FIFO+1];
   int i;

	buff[0] = RC632_REG_FIFO_DATA;
   for(i=1; i<length+1; i++)
   {
		buff[i] =  *(data + i - 1);
   }
   spi_send(buff, length+1);

}
/*************************************************************************/



/*** BeginHeader rc632_fifo_read */
void rc632_fifo_read(byte *data, int length);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_fifo_read                         <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_fifo_read(byte *data, int length);

DESCRIPTION:   Lee desde el buffer FIFO del integrado CL RC632.

PARAMETER1:    Arreglo de bytes leidos desde el buffer FIFO.
PARAMETER2:    Longitud del arreglo de bytes a ser leido desde el buffer.

END DESCRIPTION **********************************************************/
void rc632_fifo_read(byte *data, int length)
{
	byte send[LENGTH_FIFO];
   int i;

   for(i=0; i<length; i++)
   {
		send[i] = RC632_REG_FIFO_DATA;
   }

   spi_receive(send, data, length);

}
/*************************************************************************/



/*** BeginHeader rc632_write_eeprom */
void rc632_write_eeprom(byte *e2prom_data, byte addr_LSB, byte addr_MSB, int length);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_write_eeprom                       <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_write_eeprom(byte *data, byte addr_LSB, byte addr_MSB, int length);

DESCRIPTION:   Escribe la memoria EEPROM(512bytes) del integrado CL RC632.

PARAMETER1:    Arreglo de bytes a ser escrito en la EEPROM.
PARAMETER2:    Parte baja de la direccion de la EEPROM.
PARAMETER3:    Parte alta de la direccion de la EEPROM.
PARAMETER4:    Cantidad de bytes a ser escritos.

END DESCRIPTION **********************************************************/
void rc632_write_eeprom(byte *e2prom_data, byte addr_LSB, byte addr_MSB, int length)
{
	byte sndbuf[LENGTH_FIFO], receive[1];
	int i;

	sndbuf[0] = addr_LSB;
	sndbuf[1] = addr_MSB;

	for(i=0; i<length; i++)
   {
   	sndbuf[i+2] = *(e2prom_data+i);
	}

   rc632_fifo_write(sndbuf, length+2);

	rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_WRITE_E2);
   do
   {
      rc632_reg_read(RC632_REG_SECONDARY_STATUS, receive);
      receive[0] &= 0x40;
   } while(receive[0] == 0x00);    //Espera a que el bit E2ready sea "1"

   rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_IDLE);  //Fin del ciclo de escritura

}
/*************************************************************************/



/*** BeginHeader rc632_read_eeprom */
void rc632_read_eeprom(byte *e2prom_data, byte addr_LSB, byte addr_MSB, int length);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_read_eeprom                       <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_read_eeprom(byte *data, byte addr_LSB, byte addr_MSB, int length);

DESCRIPTION:   Lee la memoria EEPROM(512bytes) del integrado CL RC632.

PARAMETER1:    Arreglo de bytes con los datos leidos desde la EEPROM.
PARAMETER2:    Parte baja de la direccion de la EEPROM.
PARAMETER3:    Parte alta de la direccion de la EEPROM.
PARAMETER4:    Cantidad de bytes a ser leidos(64 bytes por vez).

END DESCRIPTION **********************************************************/
void rc632_read_eeprom(byte *e2prom_data, byte addr_LSB, byte addr_MSB, int length)
{
	byte sndbuf[3];

	sndbuf[0] = addr_LSB;
	sndbuf[1] = addr_MSB;
	sndbuf[2] = (byte)length;

   rc632_fifo_write(sndbuf, 3);

	rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_READ_E2);

	//idle_rc632();

   rc632_fifo_read(e2prom_data, length);

}
/*************************************************************************/




/*** BeginHeader key_format */
void key_format(byte *key6, byte *key12);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
key_format                              <RFID_ASIC_RC632.LIB>

SYNTAX:			void key_format(byte *key6, byte *key12);

DESCRIPTION:   Prepara una clave en el formato a almacenar en KEY BUFFER.

PARAMETER1:    Clave a ser transformada(pag 79 datasheet).

END DESCRIPTION **********************************************************/
void key_format(byte *key6, byte *key12)
{
	byte nibble_l;
   byte nibble_h;
   int i;

  	for (i = 0; i < RFID_MIFARE_KEY_LEN; i++)
   {
		nibble_l = key6[i] & 0x0f;
		nibble_h = key6[i] >> 4;
		key12[i * 2 + 1] = (~nibble_l << 4) | nibble_l;
		key12[i * 2] = (~nibble_h << 4) | nibble_h;
	}

}
/*************************************************************************/



/*** BeginHeader rc632_storage_key_buffer */
void rc632_storage_key_buffer(byte *key);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_storage_key_buffer                <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_storage_key_buffer(byte *key);

DESCRIPTION:   Almacena una clave Crypto1 en KEY BUFFER.

PARAMETER1:    Clave a encriptar.

END DESCRIPTION **********************************************************/
void rc632_storage_key_buffer(byte *key)
{
	byte crypto1_key[RFID_MIFARE_KEY_CRYPTO1_LEN];

   key_format(key, crypto1_key);

   rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_IDLE);

   rc632_fifo_write(crypto1_key, RFID_MIFARE_KEY_CRYPTO1_LEN);

	rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_LOAD_KEY);
}
/*************************************************************************/



/*** BeginHeader rc632_powerRF */
void rc632_powerRF(short on);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_powerRF                           <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_powerRF(short on);

DESCRIPTION:   Escribe un comando o valor en el registro indicado
					del integrado CL RC632.

PARAMETER1:    Valor para encender o apagar la transmision RF.
					on = 1 enciende la señal RF.
               on = 0 apaga la señal RF.

END DESCRIPTION **********************************************************/
void rc632_powerRF(short on)
{
	byte receive[1];

	rc632_reg_read(RC632_REG_TX_CONTROL, receive);

   if(on)
     	rc632_reg_write(RC632_REG_TX_CONTROL, (receive[0] | (RC632_TXCTRL_TX1_RF_EN | RC632_TXCTRL_TX2_RF_EN)));
   else
		rc632_reg_write(RC632_REG_TX_CONTROL, (receive[0] & ~(RC632_TXCTRL_TX1_RF_EN | RC632_TXCTRL_TX2_RF_EN)));
}
/*************************************************************************/



/*** BeginHeader rc632_transceive */
byte rc632_transceive(byte *tx_buff, byte tx_len, byte *rx_buff, byte *rx_len);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_transceive                <RFID_ASIC_RC632.LIB>

SYNTAX:			byte rc632_transceive(byte *tx_buff, byte tx_len, byte *rx_buff, byte *rx_len);

DESCRIPTION:   Transmision de datos desde el IC RC632 y recepcion de los datos
					en respuesta desde una tarjeta RF.

PARAMETER1:    Datos a ser transmitidos.
PARAMETER2:    Longitud de datos a transmitir.
PARAMETER3:    Datos a ser recibidos.
PARAMETER4:    Longitud de datos recibidos.

END DESCRIPTION **********************************************************/
byte rc632_transceive(byte *tx_buff, byte tx_len, byte *rx_buff, byte *rx_len)
{
	byte flags[1], fgt[1];

	/*Idle state*/
   rc632_reg_write(RC632_REG_COMMAND, 0x00);
	/*Clear all interrupts and errors flags*/
	rc632_reg_write(RC632_REG_INTERRUPT_RQ, 0x00);
	rc632_reg_write(RC632_REG_ERROR_FLAG, 0x00);
   /*Frame Guard Time then of transmit*/
//	rc632_reg_write(RC632_REG_RX_WAIT, fgt);

	rc632_fifo_write(tx_buff, tx_len);
   rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_TRANSCEIVE);
 	idle_rc632();

   /*Check errors*/
   rc632_reg_read(RC632_REG_ERROR_FLAG, flags);

   if(flags[0] &= 0x0F) return flags[0];

   rc632_reg_read(RC632_REG_FIFO_LENGTH, rx_len);
   rc632_fifo_read(rx_buff, rx_len[0]);

   return 0x00;
}
/*************************************************************************/



/*** BeginHeader rc632_iso14443a_transceive_sf */
byte rc632_iso14443a_transceive_sf(byte cmd, byte *atqa);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_iso14443a_transceive_sf                <RFID_ASIC_RC632.LIB>

SYNTAX:			byte rc632_iso14443a_transceive_sf(byte cmd, byte *atqa);

DESCRIPTION:   Envia un marco de 7 bits que es usado para los comando
			   REQA y WUPA.

PARAMETER1:    Comando de 7 bits, ej REQA, WUPA.
PARAMETER2:    Respuesta ATQA desde la tarjeta.

END DESCRIPTION **********************************************************/
byte rc632_iso14443a_transceive_sf(byte cmd, byte *atqa)
{
   byte tx_buff[1], receive[1], rx_len[1], err;
   rx_len[0] = 2;
   tx_buff[0] = cmd;

   /*Without crypto1*/
	rc632_reg_read(RC632_REG_CONTROL, receive);
   rc632_reg_write(RC632_REG_CONTROL, (receive[0] & ~RC632_CONTROL_CRYPTO1_ON));

	/*Transfer only 7 bits of last byte in frame */
   rc632_reg_write(RC632_REG_BIT_FRAMING, 0x07);

   /*Disable Tx CRC, Rx CRC*/
   rc632_reg_read(RC632_REG_CHANNEL_REDUNDANCY, receive);
   receive[0] &= ~(RC632_CR_TX_CRC_ENABLE | RC632_CR_RX_CRC_ENABLE);
	rc632_reg_write(RC632_REG_CHANNEL_REDUNDANCY, receive[0]);

   err = rc632_transceive(tx_buff, sizeof(tx_buff), atqa, rx_len);
#if 0
   /*Switch back to normal 8bit last byte */
   rc632_reg_write(RC632_REG_BIT_FRAMING, 0x00);
#endif

   if(err == 0x00 && rx_len[0] == 2)
   	return 0x00;
   else
   	if(err != 0x00)
   		return err;
      else
      	return ERROR_ATQA;
 }
/*************************************************************************/



/*** BeginHeader rc632_mifare_transceive */
byte rc632_mifare_transceive(byte *tx_buff, byte tx_len, byte *rx_buff, byte *rx_len);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_mifare_transceive                <RFID_ASIC_RC632.LIB>

SYNTAX:			byte rc632_mifare_transceive(byte *tx_buff, byte tx_len, byte *rx_buff, byte *rx_len);

DESCRIPTION:   Transmision de datos desde el IC RC632 y recepcion de los datos
					en respuesta desde una tarjeta Mifare RF.

PARAMETER1:    Datos a ser transmitidos.
PARAMETER2:    Longitud de datos a transmitir.
PARAMETER3:    Datos a ser recibidos.
PARAMETER4:    Longitud de datos recibidos.

RETURN: Se devuelve 0x00 si todo sale bien, y ERROR_FLAG si existe algun error.
END DESCRIPTION **********************************************************/
byte rc632_mifare_transceive(byte *tx_buff, byte tx_len, byte *rx_buff, byte *rx_len)
{

	/*Paridad impar, se habilita CRC para Tx y Rx*/
	rc632_reg_write(RC632_REG_CHANNEL_REDUNDANCY, (RC632_CR_PARITY_ENABLE | RC632_CR_PARITY_ODD | RC632_CR_TX_CRC_ENABLE | RC632_CR_RX_CRC_ENABLE));

	return rc632_transceive(tx_buf, tx_len, rx_buf, rx_len);

}
/*************************************************************************/



/*** BeginHeader rc632_mifare_auth */
byte rc632_mifare_auth(byte cards_auth_cmd, byte block, byte *key_mifare, byte *uid);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_mifare_auth                <RFID_ASIC_RC632.LIB>

SYNTAX:			byte rc632_mifare_auth(byte cards_auth_cmd, byte block, byte *key_mifare, byte *uid);

DESCRIPTION:   Autentica el IC RC632 con una tarjeta MIFARE.

PARAMETER1:    Comando de autenticacion de la tarjeta,
					clave tipoA=0x60, tipoB=0x61.
PARAMETER2:    Bloque de la tarjeta con el cual se autentica.
PARAMETER3:    Clave MIFARE del sector al que pertenece el bloque.
PARAMETER4:    Numero de serie de la tarjeta, primeros 4bytes del bloque 0.

END DESCRIPTION **********************************************************/
byte rc632_mifare_auth(byte cards_auth_cmd, byte block, byte *key_mifare, byte *uid)
{
   byte sndbuf[6], receive[1];
   int i;

	sndbuf[0] = cards_auth_cmd;
	sndbuf[1] = block;

	for(i=0; i<4; i++)
   {
   	sndbuf[i+2] = *(uid+i);
	}

   rc632_storage_key_buffer(key_mifare);

   /****************************************************************/
   /*Enable Tx CRC, Rx CRC, and odd parity*/
   rc632_reg_read(RC632_REG_CHANNEL_REDUNDANCY, receive);
   receive[0] |= (RC632_CR_TX_CRC_ENABLE | RC632_CR_RX_CRC_ENABLE |
   				   RC632_CR_PARITY_ODD    | RC632_CR_PARITY_ENABLE);
	rc632_reg_write(RC632_REG_CHANNEL_REDUNDANCY, receive[0]);
   /****************************************************************/

	/* Authent1 Command */
	rc632_fifo_write(sndbuf, 6);
	rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_AUTHENT1);

   idle_rc632();

   rc632_reg_read(RC632_REG_ERROR_FLAG, receive);
   if(receive[0] != 0x00) return ERROR_FLAG;

	/* Authent2 Command */
	rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_AUTHENT2);

   idle_rc632();

 	/* Check whether authentication was successful */
   rc632_reg_read(RC632_REG_CONTROL, receive);
   if(!(receive[0] & RC632_CONTROL_CRYPTO1_ON)) return ERROR_CRYPTO1_ON;

	return 0x00;
}
/*************************************************************************/







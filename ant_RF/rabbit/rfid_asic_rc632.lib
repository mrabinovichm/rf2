/*** BeginHeader RFID_ASIC_RC632 */

/* Funciones especificas para uso con el IC CL RC632 */

#define LENGTH_FIFO 64

/*** EndHeader */



/*** BeginHeader init_uP_interface */
void init_uP_interface(void);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
init_uP_interface                         <UTILS.LIB>

SYNTAX:			void init_uP_interface(void);

DESCRIPTION:   Inicializa la interfaz entre el RC632 y el uProcesador con
					puerto paralelo, no necesaria para puerto SPI

END DESCRIPTION **********************************************************/
void init_uP_interface(void)
{
	byte cmd_up_interface[2];

   cmd_up_interface[0] = RC632_REG_PAGE0;     //Escribir en Page-Registry
   cmd_up_interface[1] = 0x80;     //Inicializa la interfaz con el uProcesador

   spi_send(cmd_up_interface, 2);
}
/*************************************************************************/



/*** BeginHeader idle_rc632 */
void idle_rc632(void);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
idle_rc632                                 <UTILS.LIB>

SYNTAX:			void idle_rc632(void);

DESCRIPTION:   Verifica que el IC RC632 está ocioso.
					El valor del registro de comando debe estar en 0.

END DESCRIPTION **********************************************************/
void idle_rc632(void)
{
	byte send[1], receive[1];

   do
   {
		send[0] = RC632_REG_COMMAND;
      spi_receive(send, receive, 1);
   } while(receive[0] != 0x00);
}
/*************************************************************************/



/*** BeginHeader page_disable */
void page_disable(void);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
page_disable                         <UTILS.LIB>

SYNTAX:			void page_disable(void);

DESCRIPTION:   Deshabilita el direccionamiento por pagina escribiendo
					0x00 en el registro de Pagina0.
					El direccionamiento sera lineal.

END DESCRIPTION **********************************************************/
void page_disable(void)
{
	byte cmd_page_disable[2];

	cmd_page_disable[0] = RC632_REG_PAGE0;
	cmd_page_disable[1] = 0x00;            //habilita el direccionamiento lineal

   spi_send(cmd_page_disable, 2);

}
/*************************************************************************/



/*** BeginHeader reset_FIFO_buffer */
void reset_FIFO_buffer(void);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
reset_FIFO_buffer                                <UTILS.LIB>

SYNTAX:			void reset_FIFO_buffer(void);

DESCRIPTION:   Borra el buffer del integrado poniendo un "1" en el bit 0
					(FlushFIFO) del registro de control.

END DESCRIPTION **********************************************************/
void reset_FIFO_buffer(void)
{
	byte send[2], receive[1];

   send[0] = RC632_REG_CONTROL;

   spi_receive(send, receive, 1);      //lee el registro de control

   send[0] = RC632_REG_CONTROL;
   send[1] = receive[0] | RC632_CONTROL_FIFO_FLUSH;

   spi_send(send, 2);                  //escribe el registro de control

}



/*** BeginHeader rc632_fifo_write */
void rc632_fifo_write(byte *data, int length);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_fifo_write                         <UTILS.LIB>

SYNTAX:			void rc632_fifo_write(byte *data, int length);

DESCRIPTION:   Escribe en el buffer FIFO del integrado RC632.

PARAMETER1:    Arreglo de bytes a ser escrito en el buffer FIFO.
PARAMETER2:    Longitud del arreglo de bytes

END DESCRIPTION **********************************************************/
void rc632_fifo_write(byte *data, int length)
{
	byte buff[LENGTH_FIFO+1];
   int i;

	buff[0] = RC632_REG_FIFO_DATA;
   for(i=1; i<length+1; i++)
   {
		buff[i] =  *(data + i - 1);
   }
   spi_send(buff, length+1);

}
/*************************************************************************/



/*** BeginHeader rc632_fifo_read */
void rc632_fifo_read(byte *data, int length);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_fifo_read                         <UTILS.LIB>

SYNTAX:			void rc632_fifo_read(byte *data, int length);

DESCRIPTION:   Lee desde el buffer FIFO del integrado RC632.

PARAMETER1:    Arreglo de bytes leidos desde el buffer FIFO.
PARAMETER2:    Longitud del arreglo de bytes

END DESCRIPTION **********************************************************/
void rc632_fifo_read(byte *data, int length)
{
	byte send[LENGTH_FIFO];
   int i;

   for(i=0; i<length; i++)
   {
		send[i] = RC632_REG_FIFO_DATA;
   }

   spi_receive(send, data, length);

}
/*************************************************************************/
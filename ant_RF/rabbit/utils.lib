/*** BeginHeader UTILS */

/* Funciones de uso general */
/* Indice de funciones: */

/* printHexa: Imprime en pantalla el contenido de un arreglo, en hexadecimal */
/* spi_send: Escribe en el puerto SPI los datos suministrados */
/* spi_receive: Recibe en un arreglo la lectura desde el puerto SPI */

#define BUFF_SIZE 255	//Cantidad max. de datos a leer desde el puerto SPI
								//elegido en forma arbitraria.

/*** EndHeader */



/*** BeginHeader printHexa */
void printHexa(byte *data, int length);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
printHexa                                 <UTILS.LIB>

SYNTAX:			void printHexa(byte *data, int length);

DESCRIPTION:   Imprime un arreglo de bytes en formato hexadecimal

PARAMETER1:    Arreglo de bytes a imprimir
PARAMETER2:    Longitud del arreglo de bytes

END DESCRIPTION **********************************************************/
void printHexa(byte *data, int length)
{
   int i;
   for (i=0; i<length; i++) {
       printf("%02X", data[i]);
   }
   printf("\n");
}
/*************************************************************************/



/*** BeginHeader spi_send */
void spi_send(byte *data, int length);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
spi_send                         <UTILS.LIB>

SYNTAX:			void spi_send(byte *data, int length);

DESCRIPTION:   Envía datos por el puerto SPI.

PARAMETER1:    Arreglo de bytes a enviar por el puerto SPI
PARAMETER2:    Longitud del arreglo de bytes

END DESCRIPTION **********************************************************/
void spi_send(byte *data, int length)
{
	byte wr_mode;

   wr_mode = *data;
   wr_mode = (wr_mode<<1) & 0x7E;           //standard write mode on SPI.
   *data = wr_mode;

	BitWrPortI(PEDR, &PEDRShadow, 0, 1);	//select RC632
	SPIWrite(data, length);
   BitWrPortI(PEDR, &PEDRShadow, 1, 1);	//not select RC632
}
/*************************************************************************/




/*** BeginHeader spi_receive */
void spi_receive(byte *addr, byte *data, int length);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
spi_receive                         <UTILS.LIB>

SYNTAX:			void spi_receive(byte *addr, byte *data, int length);

DESCRIPTION:   Recibe datos por el puerto SPI.

PARAMETER1:    Arreglo de bytes de direcciones a leer dede el puerto SPI
PARAMETER2:    Longitud del arreglo de bytes.

END DESCRIPTION **********************************************************/
void spi_receive(byte *addr, byte *data, int length)
{
	byte rd_mode[BUFF_SIZE], rec_data[BUFF_SIZE];
   int i;

   rd_mode[0] = *addr;
   rd_mode[0] = (rd_mode[0]<<1) | 0x80;      //standard read mode on SPI.

   for(i=1; i<length; i++)
   {
      rd_mode[i] = (*(addr+i)<<1) & 0x7E;
   }
	rd_mode[length] = 0x00;

	BitWrPortI(PEDR, &PEDRShadow, 0, 1);	//select RC632
   SPIWrRd(rd_mode, rec_data, length+1);
   BitWrPortI(PEDR, &PEDRShadow, 1, 1);	//not select RC632

   if(i==1)
   	*data = rec_data[1];
   else
   {
   	for(i=0; i<length; i++)
      {
      	*(data+i) = rec_data[i+1];
      }
   }

}
/*************************************************************************/



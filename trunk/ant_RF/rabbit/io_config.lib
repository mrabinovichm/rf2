/*** BeginHeader IO_CONFIG */

#define SPI_SER_D          	//Utiliza el puerto serie D como puerto SPI
#define SERD_USEPORTC      	//Permite usar los demás pines de puerto C
#define SPI_CLOCK_MODE 	2		//Equivalente al modo 0 de Motorola
#define SPI_CLK_DIVISOR 5
#define SPI_RX_PORT SPI_RX_PC

#use "spi.lib"

/*** EndHeader */


/*** BeginHeader init_IO_config */
void init_IO_config();
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
init_IO_config                                 <IO_CONFIG.LIB>

SYNTAX:			void init_IO_config();

DESCRIPTION: 	Configuracion de pines gpio para controlar la antena RF

               - PE0 = IRQ    -
					- PE1 = SPI_CS -
               - PE3 = SCLKD  -
               - PC0 = TxD    -
					- PC4 = RST  	-

END DESCRIPTION **********************************************************/

void init_IO_config(){

   WrPortI(PEDDR, &PEDDRShadow, (0x02 | PEDDRShadow)); //PE0=entrada, PE1=salida
   WrPortI(PCFR, &PCFRShadow, (PCFRShadow & 0xCF));    //PC4 y PC5 como gpio
   WrPortI(PCDDR, &PCDDRShadow, (0x10 | PCDDRShadow)); //PC4=salida

   WrPortI(PEALR, &PEALRShadow, (0xC0 | PEALRShadow)); //PE3=SCLKD clock SPI
  	WrPortI(PEFR, &PEFRShadow, (0x08 | PEFRShadow));    //PE3 enable SCLKD
   WrPortI(PCALR, &PCALRShadow, (0xFC & PCALRShadow)); //PC0=TxD serial D
   WrPortI(PCFR, &PCFRShadow, (PCFRShadow | 0x01));    //PC0 enable TxD
  	WrPortI(SDCR, &SDCRShadow, (0xCF & SDCRShadow)); 	 //Parallel Port PC input
   WrPortI(SDCR, &SDCRShadow, (0x0C | SDCRShadow)); 	 //Internal clock serial
//   WrPortI(SDER, &SDERShadow, (0xCC & SDERShadow)); 	 // (CC)
//   WrPortI(SDER, &SDERShadow, (0xCC | SDERShadow)); 	 // (CC)

}
/*************************************************************************/



/*** BeginHeader init_Interrupt */
void init_Interrupt();
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
init_Interrupt                                 <IO_CONFIG.LIB>

SYNTAX:			void init_Interrupt();

DESCRIPTION:   Configuracion de interrupciones externas
               Cuando se usen las entradas PE como fuentes de interrupcion,
               verificar que no estén flotando, sino agregar un pull-up o
               pull-down

END DESCRIPTION **********************************************************/

void init_Interrupt(){

	SetVectExtern3000(0, isr_RF);     //Vector de interrupciones para la ISR
	WrPortI(I0CR, &I0CRShadow, 0x09); //Enable external INT0 on PE0, rising edge,
   											 //priority 1

}
/******************************************************************************/
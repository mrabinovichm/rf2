/*** BeginHeader RFID_ASIC_RC632 */

/* Funciones especificas para uso con el IC CL RC632 */

#define LENGTH_FIFO 64

#define RFID_MIFARE_KEY_LEN 6
#define RFID_MIFARE_KEY_CRYPTO1_LEN 12

/*** EndHeader */



/*** BeginHeader rc632_reg_write */
void rc632_reg_write(byte reg, byte val);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_reg_write                         <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_reg_write(byte reg, byte val);

DESCRIPTION:   Escribe un comando o valor en el registro indicado
					del integrado CL RC632.

PARAMETER1:    Direccion de registro a ser modificado.
PARAMETER2:    Valor a ser escrito en el registro indicado.

END DESCRIPTION **********************************************************/
void rc632_reg_write(byte reg, byte val)
{
   byte send[2];

   send[0] = reg;
   send[1] = val;

   spi_send(send, 2);

}
/*************************************************************************/



/*** BeginHeader rc632_reg_read */
void rc632_reg_read(byte reg, byte *val);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_reg_read                          <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_reg_read(byte reg, byte *val);

DESCRIPTION:   Lee el registro indicado del integrado CL RC632.

PARAMETER1:    Direccion de registro a ser leido.
PARAMETER2:    Valor devuelto por el registro.

END DESCRIPTION **********************************************************/
void rc632_reg_read(byte reg, byte *val)
{
	byte send[1];

   send[0] = reg;

   spi_receive(send, val, 1);
}
/*************************************************************************/



/*** BeginHeader rc632_set_bit_mask */
void rc632_set_bit_mask(byte reg, byte mask);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_set_bit_mask                         <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_set_bit_mask(byte reg, byte mask);

DESCRIPTION:   Todos los bits que valen "1" en la mascara, son puestos a
					"1" en el registro indicado del integrado CL RC632.

PARAMETER1:    Direccion de registro a ser modificado.
PARAMETER2:    Valor de la mascara.

END DESCRIPTION **********************************************************/
void rc632_set_bit_mask(byte reg, byte mask)
{
   byte receive[1];

   rc632_reg_read(reg, receive);
   rc632_reg_write(reg, (receive[0] | mask));
}
/*************************************************************************/



/*** BeginHeader rc632_clear_bit_mask */
void rc632_clear_bit_mask(byte reg, byte mask);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_clear_bit_mask                         <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_clear_bit_mask(byte reg, byte mask);

DESCRIPTION:   Todos los bits que valen "1" en la mascara, son puestos a
					"0" en el registro indicado del integrado CL RC632.

PARAMETER1:    Direccion de registro a ser modificado.
PARAMETER2:    Valor de la mascara.

END DESCRIPTION **********************************************************/
void rc632_clear_bit_mask(byte reg, byte mask)
{
   byte receive[1];

   rc632_reg_read(reg, receive);
   rc632_reg_write(reg, (receive[0] & ~mask));
}
/*************************************************************************/



/*** BeginHeader init_uP_interface */
void init_uP_interface(void);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
init_uP_interface                       <RFID_ASIC_RC632.LIB>

SYNTAX:			void init_uP_interface(void);

DESCRIPTION:   Inicializa la interfaz entre el CL RC632 y el uProcesador
					con puerto paralelo, no necesaria para puerto SPI

END DESCRIPTION **********************************************************/
void init_uP_interface(void)
{
	byte cmd_up_interface[2];

   cmd_up_interface[0] = RC632_REG_PAGE0;     //Escribir en Page-Registry
   cmd_up_interface[1] = 0x80;     //Inicializa la interfaz con el uProcesador

   spi_send(cmd_up_interface, 2);
}
/*************************************************************************/



/*** BeginHeader idle_rc632 */
void idle_rc632(void);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
idle_rc632                              <RFID_ASIC_RC632.LIB>

SYNTAX:			void idle_rc632(void);

DESCRIPTION:   Verifica que el IC CL RC632 está ocioso.
					El valor del registro de comando debe estar en 0.

END DESCRIPTION **********************************************************/
void idle_rc632(void)
{
	byte send[1], receive[1];

   do
   {
		send[0] = RC632_REG_COMMAND;
      spi_receive(send, receive, 1);
   } while(receive[0] != 0x00);
}
/*************************************************************************/



/*** BeginHeader page_disable */
void page_disable(void);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
page_disable                            <RFID_ASIC_RC632.LIB>

SYNTAX:			void page_disable(void);

DESCRIPTION:   Deshabilita el direccionamiento por pagina escribiendo
					0x00 en el registro de Pagina0.
					El direccionamiento sera lineal.

END DESCRIPTION **********************************************************/
void page_disable(void)
{
	byte cmd_page_disable[2];

	cmd_page_disable[0] = RC632_REG_PAGE0;
	cmd_page_disable[1] = 0x00;            //habilita el direccionamiento lineal

   spi_send(cmd_page_disable, 2);

}
/*************************************************************************/



/*** BeginHeader reset_FIFO_buffer */
void reset_FIFO_buffer(void);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
reset_FIFO_buffer                       <RFID_ASIC_RC632.LIB>

SYNTAX:			void reset_FIFO_buffer(void);

DESCRIPTION:   Borra el buffer del integrado poniendo un "1" en el bit 0
					(FlushFIFO) del registro de control.

END DESCRIPTION **********************************************************/
void reset_FIFO_buffer(void)
{
   rc632_set_bit_mask(RC632_REG_CONTROL, RC632_CONTROL_FIFO_FLUSH);

}
/*************************************************************************/



/*** BeginHeader rc632_fifo_write */
void rc632_fifo_write(byte *data, int length);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_fifo_write                        <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_fifo_write(byte *data, int length);

DESCRIPTION:   Escribe en el buffer FIFO del integrado CL RC632.

PARAMETER1:    Arreglo de bytes a ser escrito en el buffer FIFO.
PARAMETER2:    Longitud del arreglo de bytes a ser escrito en el buffer.

END DESCRIPTION **********************************************************/
void rc632_fifo_write(byte *data, int length)
{
	byte buff[LENGTH_FIFO+1];
   int i;

	buff[0] = RC632_REG_FIFO_DATA;
   for(i=1; i<length+1; i++)
   {
		buff[i] =  *(data + i - 1);
   }
   spi_send(buff, length+1);

}
/*************************************************************************/



/*** BeginHeader rc632_fifo_read */
void rc632_fifo_read(byte *data, int length);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_fifo_read                         <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_fifo_read(byte *data, int length);

DESCRIPTION:   Lee desde el buffer FIFO del integrado CL RC632.

PARAMETER1:    Arreglo de bytes leidos desde el buffer FIFO.
PARAMETER2:    Longitud del arreglo de bytes a ser leido desde el buffer.

END DESCRIPTION **********************************************************/
void rc632_fifo_read(byte *data, int length)
{
	byte send[LENGTH_FIFO];
   int i;

   for(i=0; i<length; i++)
   {
		send[i] = RC632_REG_FIFO_DATA;
   }

   spi_receive(send, data, length);

}
/*************************************************************************/



/*** BeginHeader rc632_write_eeprom */
void rc632_write_eeprom(byte *e2prom_data, byte addr_LSB, byte addr_MSB, int length);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_write_eeprom                       <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_write_eeprom(byte *data, byte addr_LSB, byte addr_MSB, int length);

DESCRIPTION:   Escribe la memoria EEPROM(512bytes) del integrado CL RC632.

PARAMETER1:    Arreglo de bytes a ser escrito en la EEPROM.
PARAMETER2:    Parte baja de la direccion de la EEPROM.
PARAMETER3:    Parte alta de la direccion de la EEPROM.
PARAMETER4:    Cantidad de bytes a ser escritos.

END DESCRIPTION **********************************************************/
void rc632_write_eeprom(byte *e2prom_data, byte addr_LSB, byte addr_MSB, int length)
{
	byte sndbuf[LENGTH_FIFO], receive[1];
	int i;

	sndbuf[0] = addr_LSB;
	sndbuf[1] = addr_MSB;

	for(i=0; i<length; i++)
   {
   	sndbuf[i+2] = *(e2prom_data+i);
	}

   rc632_fifo_write(sndbuf, length+2);

	rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_WRITE_E2);
   do
   {
      rc632_reg_read(RC632_REG_SECONDARY_STATUS, receive);
      receive[0] &= 0x40;
   } while(receive[0] == 0x00);    //Espera a que el bit E2ready sea "1"

   rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_IDLE);  //Fin del ciclo de escritura

}
/*************************************************************************/



/*** BeginHeader rc632_read_eeprom */
void rc632_read_eeprom(byte *e2prom_data, byte addr_LSB, byte addr_MSB, int length);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_read_eeprom                       <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_read_eeprom(byte *data, byte addr_LSB, byte addr_MSB, int length);

DESCRIPTION:   Lee la memoria EEPROM(512bytes) del integrado CL RC632.

PARAMETER1:    Arreglo de bytes con los datos leidos desde la EEPROM.
PARAMETER2:    Parte baja de la direccion de la EEPROM.
PARAMETER3:    Parte alta de la direccion de la EEPROM.
PARAMETER4:    Cantidad de bytes a ser leidos(64 bytes por vez).

END DESCRIPTION **********************************************************/
void rc632_read_eeprom(byte *e2prom_data, byte addr_LSB, byte addr_MSB, int length)
{
	byte sndbuf[3];

	sndbuf[0] = addr_LSB;
	sndbuf[1] = addr_MSB;
	sndbuf[2] = (byte)length;

   rc632_fifo_write(sndbuf, 3);

	rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_READ_E2);

   rc632_fifo_read(e2prom_data, length);

}
/*************************************************************************/




/*** BeginHeader key_format */
void key_format(byte *key6, byte *key12);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
key_format                              <RFID_ASIC_RC632.LIB>

SYNTAX:			void key_format(byte *key6, byte *key12);

DESCRIPTION:   Prepara una clave en el formato a almacenar en KEY BUFFER.

PARAMETER1:    Clave a ser transformada(pag 79 datasheet).

END DESCRIPTION **********************************************************/
void key_format(byte *key6, byte *key12)
{
	byte nibble_l;
   byte nibble_h;
   int i;

  	for (i = 0; i < RFID_MIFARE_KEY_LEN; i++)
   {
		nibble_l = key6[i] & 0x0f;
		nibble_h = key6[i] >> 4;
		key12[i * 2 + 1] = (~nibble_l << 4) | nibble_l;
		key12[i * 2] = (~nibble_h << 4) | nibble_h;
	}

}
/*************************************************************************/



/*** BeginHeader rc632_storage_key_buffer */
byte rc632_storage_key_buffer(byte *key);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_storage_key_buffer                <RFID_ASIC_RC632.LIB>

SYNTAX:			byte rc632_storage_key_buffer(byte *key);

DESCRIPTION:   Almacena una clave Crypto1 en KEY BUFFER.

PARAMETER1:    Clave a encriptar.

END DESCRIPTION **********************************************************/
byte rc632_storage_key_buffer(byte *key)
{
	byte crypto1_key[RFID_MIFARE_KEY_CRYPTO1_LEN], reg_flags;
   /*Genera clave de 12 bytes a partir da la clave de sector de 6 bytes*/
   key_format(key, crypto1_key);

   rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_IDLE);
   /*Carga la clave de 12 bytes en el buffer FIFO*/
   rc632_fifo_write(crypto1_key, RFID_MIFARE_KEY_CRYPTO1_LEN);
   /*Carga la clave de 12 bytes en el key buffer*/
	rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_LOAD_KEY);
   /*Lee el registro de banderas de error para devolver el estado*/
   rc632_reg_read(RC632_REG_ERROR_FLAG, &reg_flags);

   return reg_flags;
}
/*************************************************************************/



/*** BeginHeader rc632_powerRF */
void rc632_powerRF(short on);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_powerRF                           <RFID_ASIC_RC632.LIB>

SYNTAX:			void rc632_powerRF(short on);

DESCRIPTION:   Escribe un comando o valor en el registro indicado
					del integrado CL RC632.

PARAMETER1:    Valor para encender o apagar la transmision RF.
					on = 1 enciende la señal RF.
               on = 0 apaga la señal RF.

END DESCRIPTION **********************************************************/
void rc632_powerRF(short on)
{
   if(on)
     	rc632_set_bit_mask(RC632_REG_TX_CONTROL, (RC632_TXCTRL_TX1_RF_EN | RC632_TXCTRL_TX2_RF_EN));
   else
		rc632_clear_bit_mask(RC632_REG_TX_CONTROL, (RC632_TXCTRL_TX1_RF_EN | RC632_TXCTRL_TX2_RF_EN));
}
/*************************************************************************/



/*** BeginHeader rc632_transceive */
byte rc632_transceive(byte *tx_buff, byte tx_len, byte *rx_buff, byte *rx_len);
/*** EndHeader */

/* START FUNCTION DESCRIPTION ********************************************
rc632_transceive                <RFID_ASIC_RC632.LIB>

SYNTAX:			byte rc632_transceive(byte *tx_buff, byte tx_len, byte *rx_buff, byte *rx_len);

DESCRIPTION:   Transmision de datos desde el IC RC632 y recepcion de los datos
					en respuesta desde una tarjeta RF.

PARAMETER1:    Datos a ser transmitidos.
PARAMETER2:    Longitud de datos a transmitir.
PARAMETER3:    Datos a ser recibidos.
PARAMETER4:    Longitud de datos recibidos.

RETURN:			Estado de las banderas del RC632 (0x00 = OK).

END DESCRIPTION **********************************************************/
byte rc632_transceive(byte *tx_buff, byte tx_len, byte *rx_buff, byte *rx_len)
{
	byte flags, modemState, status;

	/*Idle state*/
   rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_IDLE);
	/*Clear all interrupts and errors flags*/
	rc632_reg_write(RC632_REG_INTERRUPT_RQ, 0x00);
	rc632_reg_write(RC632_REG_ERROR_FLAG, 0x00);

	rc632_fifo_write(tx_buff, tx_len);
#if 0
   rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_CALC_CRC);
   do
   {
      rc632_reg_read(RC632_REG_SECONDARY_STATUS, &status);
      status &= 0x20;
   } while(status == 0x00);    /*Espera a que el bit CRCReady sea "1"*/
   rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_IDLE);
#endif

   rc632_reg_write(RC632_REG_COMMAND, RC632_CMD_TRANSCEIVE);
   do
   {
  		rc632_reg_read(RC632_REG_PRIMARY_STATUS, &modemState);
      modemState &= 0x70;
   } while(modemState);          /*Espera hasta que el modem queda ocioso*/

   /*Check errors*/
   rc632_reg_read(RC632_REG_ERROR_FLAG, &flags);
   if(flags &= 0x0F) return flags;

   rc632_reg_read(RC632_REG_FIFO_LENGTH, rx_len);
   rc632_fifo_read(rx_buff, rx_len[0]);

   return 0x00;
}
/*************************************************************************/






